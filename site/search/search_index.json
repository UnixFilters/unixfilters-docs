{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":""},{"location":"documentation_checker/","title":"Documentation du checker","text":"<p>Ce projet permet d'\u00e9valuer le code envoy\u00e9 depuis l'interface, en comparant la sortie produite par le code avec une sortie attendue.</p>"},{"location":"documentation_checker/#architecture","title":"Architecture","text":"<pre><code>.\n\u251c\u2500\u2500 blocklyUnixFilters_lib.js\n\u251c\u2500\u2500 docs\n\u2502 \u251c\u2500\u2500 documentation_checker.md\n\u2502 \u2514\u2500\u2500 documentation_checker.py\n\u251c\u2500\u2500 exemple_checker\n\u2502 \u2514\u2500\u2500 tests\n\u2502  \u251c\u2500\u2500 copie de la librairie blockly\n\u2502  \u2502 \u2514\u2500\u2500 ...\n\u2502  \u251c\u2500\u2500 files\n\u2502  \u2502 \u251c\u2500\u2500 test01.in # Fichier pris en entr\u00e9e par le checker\n\u2502  \u2502 \u251c\u2500\u2500 test01.out # JSON obtenu apr\u00e8s ex\u00e9cution du code\n\u2502  \u2502 \u2514\u2500\u2500 test01.solout # R\u00e9sultat attendu\n\u2502  \u2514\u2500\u2500 gen\n\u2502    \u251c\u2500\u2500 checker.py # Logique permettant d'\u00e9valuer le score et renvoyer le feedback\n\u2502    \u251c\u2500\u2500 commands.py # Librairie ex\u00e9cutant les commandes\n\u2502    \u251c\u2500\u2500 livres.txt # Exemple de fichier d'entr\u00e9e\n\u2502    \u2514\u2500\u2500 solution.py # Contient le code g\u00e9n\u00e9r\u00e9 par les blocs\n\u251c\u2500\u2500 index.css\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 jsongenerator.js\n\u251c\u2500\u2500 task.js\n\u2514\u2500\u2500 unixfilters.js\n</code></pre>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Python 3.8+</li> <li>Node.js</li> <li>npm</li> <li>Git</li> <li>pip</li> </ul>"},{"location":"getting_started/#mode-developpement","title":"Mode d\u00e9veloppement","text":""},{"location":"getting_started/#unixfilters-franceioi","title":"unixfilters-franceIOI","text":"<p>Cloner le repo unixfilters-franceIOI</p> <pre><code>git clone https://github.com/waningcrescendo/unixfilters-franceIOI.git\n</code></pre> <p>Ajouter le repo bebras-modules dans le dossier public</p> <pre><code>cd unixfilters-franceIOI/public\ngit clone https://github.com/France-ioi/bebras-modules.git\n</code></pre> <p>Mettre en place l'environnement virtuel pour le serveur Python</p> <pre><code>cd ../python_lib\n</code></pre> <pre><code>python3 -m venv venv\n</code></pre> <ul> <li>Sur Linux/macOS :</li> </ul> <pre><code>source venv/bin/activate\n</code></pre> <ul> <li>Sur Windows :</li> </ul> <pre><code>venv\\Scripts\\activate\n</code></pre> <p>Installer flask et lancer le serveur python dans un environnement virtuel</p> <pre><code>pip install flask-cors\n</code></pre> <pre><code>python3 server.py\n</code></pre> <p>Dans un autre terminal, installer Node.js</p> <ul> <li>Sur Linux (Debian/Ubuntu) :</li> </ul> <pre><code>sudo apt update\nsudo apt install nodejs npm\n</code></pre> <ul> <li>Sur macOS :</li> </ul> <pre><code>brew install node\n</code></pre> <ul> <li>Sur Windows :</li> </ul> <p>T\u00e9l\u00e9charger et installer Node.js depuis le site officiel.</p> <p>V\u00e9rifier l'installation :</p> <pre><code>node -v\nnpm -v\n</code></pre> <p>Installer les d\u00e9pendances</p> <pre><code>npm install\n</code></pre> <p>\u00c0 la racine du projet, lancer le serveur node</p> <pre><code>node server.js\n</code></pre> <p>URL en d\u00e9veloppement : http://localhost:3000</p>"},{"location":"getting_started/#checker","title":"checker","text":"<p>En dehors du dossier unixfilters, cloner le repo</p> <pre><code>cd ..\n</code></pre> <pre><code>git clone https://github.com/UnixFilters/checker.git\n</code></pre> <p>Dans le fichier server.py, changer le chemin</p> <pre><code>PATH_BASE = \"CHEMIN\" # Remplacer par le chemin vers le dossier tests du checker\nPATH_GEN = os.path.join(PATH_BASE, \"gen\")\nPATH_FILES = os.path.join(PATH_BASE, \"files\")\n</code></pre>"},{"location":"getting_started/#mode-production","title":"Mode production","text":"<p>Ajouter les fichiers modifi\u00e9s sur le SVN</p>"},{"location":"getting_started/#suite-de-la-documentation","title":"Suite de la documentation","text":"<ul> <li>Documentation fonctions</li> <li>Documentation checker</li> <li>Mise en place d'une t\u00e2che</li> </ul>"},{"location":"help/add_block/","title":"Ajouter un bloc","text":""},{"location":"help/add_block/#ajouter-un-bloc-command","title":"Ajouter un bloc COMMAND","text":""},{"location":"help/add_block/#1-generer-le-bloc","title":"1. G\u00e9n\u00e9rer le bloc","text":"<ul> <li>Dans blocklyUnixFilters_lib.js, ajouter la commande \u00e0 la liste <code>COMMANDS</code> dans sa cat\u00e9gorie :</li> </ul> <p>Exemple : Pour ajouter une commande nomm\u00e9e <code>exemple</code>, il faut ajouter son nom, tooltip et format \u00e0 la liste.</p> blocklyUnixFilters_lib.js<pre><code>const COMMANDS = [\n  {\n    commandName: \"cat\",\n    tooltip: \"Concat\u00e8ne et affiche le contenu d'un fichier\",\n    format: \"cat [options] fichier\",\n  },\n  // Autres commandes\n  {\n    commandName: \"exemple\",\n    tooltip: \"Exemple de documentation\",\n    format: \"exemple [options]\",\n  },\n];\n</code></pre> <ul> <li>Dans le fichier <code>unixfilters</code>, ajouter la commande dans <code>optionTooltips</code> m\u00eame si elle ne poss\u00e8de pas d'options.</li> </ul> <p>Exemple :</p> unixfilters.js<pre><code>const optionTooltips = {\n  cat: {},\n  exemple:{}\n// Autres commandes\n</code></pre> <p>(Pour ajouter des options, voir la section suivante.)</p> <p>Le bloc sera ensuite cr\u00e9\u00e9 gr\u00e2ce \u00e0 la fonction makeCommandBlock.</p>"},{"location":"help/add_block/#2-ajouter-le-bloc-a-la-tache","title":"2. Ajouter le bloc \u00e0 la t\u00e2che","text":"<p>Dans le fichier <code>task.js</code>, ajouter le nom du bloc. L'ordre du fichier correspond \u00e0 l'ordre des blocs dans la bo\u00eete \u00e0 outils quand elle n'est pas tri\u00e9e. Le bloc sera nomm\u00e9 ainsi : <code>nomdelacommande</code></p> <p>Exemple :</p> task.js<pre><code>function initTask(subTask) {\n    includeBlocks: {\n        generatedBlocks: {\n            unixfilters: [\n                \"cat\",\n                \"exemple\"\n            ],\n        },\n...\n</code></pre> <p>AJOUTER A CATEGORIES AJOUTER A LABEL</p> <p>AJOUTER A JSONGENERATOR</p>"},{"location":"help/add_block/#categorie","title":"Cat\u00e9gorie","text":"<p>Par d\u00e9faut, chaque commande est dans sa propre cat\u00e9gorie lorsque la bo\u00eete \u00e0 outils est tri\u00e9e par cat\u00e9gorie. Pour cr\u00e9er une cat\u00e9gorie particuli\u00e8re, voir la documentation sur Cr\u00e9er une cat\u00e9gorie.</p>"},{"location":"help/add_block/#remarque","title":"Remarque","text":"<p>Lors de l'ajout d'une commande, il ne faut pas oublier de cr\u00e9er sa fonction correspondante dans le fichier commands.py (voir Ajouter une commande).</p>"},{"location":"help/add_block/#ajouter-un-bloc-option","title":"Ajouter un bloc OPTION","text":"<p>Chaque option (comme <code>-c</code>, <code>-b</code>\u2026) g\u00e9n\u00e8re un bloc \u00e0 partir d\u2019une structure d\u00e9finie dans <code>unixfilters.js</code>.</p> <p>Lorsque vous ajoutez une option, vous devez sp\u00e9cifier un type.</p> Type Description Exemple <code>flag</code> Pas de param\u00e8tre \u00e0 remplir, juste un bloc avec une entr\u00e9e et une sortie. <code>field_index</code> Affiche un input pour saisir un num\u00e9ro de champ ou un d\u00e9limiteur."},{"location":"help/add_block/#1-generer-le-bloc_1","title":"1. G\u00e9n\u00e9rer le bloc","text":"<p>Pour que la librairie puisse g\u00e9n\u00e9rer ce bloc, il faut :</p> <p>Dans le fichier <code>unixfilters.js</code>, ajouter l\u2019option sous la commande dans <code>optionTooltips</code>.</p> <p>Exemple : Pour ajouter l'option invent\u00e9e -x[FIELD_INDEX], il faut ajouter sa lettre (x), son type (field index) et son tooltip (indication qui sera affich\u00e9e lorsqu'on passe la souris sur le bloc) avec la commande correspondante, on prend l'exemple de tail ici.</p> unixfilters.js<pre><code>const optionTooltips = {\n  // Autres commandes\n  tail: {\n    n: {\n      field_index: \"tail : afficher les n derni\u00e8res lignes (par d\u00e9faut : 10)\",\n    },\n    c: { field_index: \"tail : afficher les n derniers octets\" },\n    x: { field_index: \"tail : affiche x\" }, // Ajout de la nouvelle option x\n  },\n};\n</code></pre> <p>Le bloc sera cr\u00e9\u00e9 automatiquement gr\u00e2ce \u00e0 la fonction <code>makeOptionBlock</code>.</p>"},{"location":"help/add_block/#2-ajouter-le-bloc-a-la-tache_1","title":"2. Ajouter le bloc \u00e0 la t\u00e2che","text":"<p>Pour que le bloc soit affich\u00e9 dans la t\u00e2che, il faut dans le fichier <code>task.js</code>, ajouter le nom du bloc.</p> <p>Le bloc sera nomm\u00e9 ainsi : <code>option_&lt;lettre&gt;_&lt;type&gt;</code>o\u00f9 le type peut \u00eatre flag/field_index.</p> <p>Exemple :</p> task.js<pre><code>function initTask(subTask) {\n    includeBlocks: {\n        generatedBlocks: {\n            unixfilters: [\n                \"option_x_field_index\"\n            ],\n        },\n...\n</code></pre>"},{"location":"help/add_block/#categorie_1","title":"Cat\u00e9gorie","text":"<ul> <li> <p>Lorsque la bo\u00eete \u00e0 outils est tri\u00e9e par cat\u00e9gorie : Par d\u00e9faut, chaque option est affich\u00e9e dans la cat\u00e9gorie de sa commande correspondante de dans <code>optionTooltips</code></p> </li> <li> <p>Sinon : L'ordre du fichier correspond \u00e0 l'ordre des blocs dans la bo\u00eete \u00e0 outils.</p> </li> </ul>"},{"location":"help/add_block/#ajouter-un-bloc-symbol","title":"Ajouter un bloc SYMBOL","text":""},{"location":"help/add_block/#1-generer-le-bloc_2","title":"1. G\u00e9n\u00e9rer le bloc","text":"<p>Dans le fichier blocklyUnixFilters_lib.js, ajouter le bloc dans sa cat\u00e9gorie correspondante.</p> <p>Exemple : Pour ajouter le symbole exemple, il faut ajouter son nom, sa couleur et son tooltip.</p> blocklyUnixFilters_lib.js<pre><code>const SYMBOL_NAMES = [\n  {\n    name: \"symbole_exemple\",\n    colour: 90,\n    tooltip: \"Exemple de tooltip\",\n  },\n  // Autres symboles\n];\n</code></pre> <p>Le bloc sera cr\u00e9\u00e9 automatiquement gr\u00e2ce \u00e0 la fonction <code>makeSymbolBlock</code>.</p>"},{"location":"help/add_block/#2-ajouter-le-bloc-a-la-tache_2","title":"2. Ajouter le bloc \u00e0 la t\u00e2che","text":"<p>Dans le fichier [task.js], ajouter le nom du bloc. L'ordre du fichier correspond \u00e0 l'ordre des blocs dans la bo\u00eete \u00e0 outils. Le bloc aura ce nommage symbol_nomdusymbole</p> <p>Exemple :</p> task.js<pre><code>function initTask(subTask) {\n    includeBlocks: {\n        generatedBlocks: {\n            unixfilters: [\n                \"cat\",\n                \"symbol_symboleExemple\"\n            ],\n        },\n...\n</code></pre>"},{"location":"help/add_block/#ajouter-un-nouveau-bloc","title":"Ajouter un nouveau bloc","text":"<p>Si aucune des structures de blocs ne vous convient, vous pouvez ajouter un nouveau bloc. Pour d\u00e9finir un bloc, il existe un outil Google pour cr\u00e9er le bloc visuellement, et r\u00e9cup\u00e9rer le code g\u00e9n\u00e9r\u00e9.</p>"},{"location":"help/add_block/#1-creer-un-bloc","title":"1. Cr\u00e9er un bloc","text":"<p>Exemple :</p> <p>Avec l'outil Google, cr\u00e9er un bloc et g\u00e9n\u00e9rer sa d\u00e9finition en JSON. </p> <p>R\u00e9cup\u00e9rer la d\u00e9finition du bloc avec un copier-coller. </p> <pre><code>{\n  \"type\": \"block_test\",\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\",\n  \"message0\": \"%1 %2 %3\",\n  \"args0\": [\n    {\n      \"type\": \"field_label_serializable\",\n      \"text\": \"bloc test\",\n      \"name\": \"NOM\"\n    },\n    {\n      \"type\": \"field_input\",\n      \"name\": \"PARAM_1\",\n      \"text\": \"default\"\n    },\n    {\n      \"type\": \"input_value\",\n      \"name\": \"PARAM_0\"\n    }\n  ],\n  \"output\": null,\n  \"colour\": 285\n}\n</code></pre>"},{"location":"help/add_block/#2-ajouter-dans-la-librairie","title":"2. Ajouter dans la librairie","text":"<p>Dans le fichier blocklyUnixFilters_lib.js, la cr\u00e9ation du bloc peut se faire :</p> <ul> <li>Avec une d\u00e9finition classique (voir le bloc text_input)</li> </ul> blocklyUnixFilters_lib.js<pre><code>context.customBlocks = {\n  unixfilters: {\n    inputs: [\n      {\n        // Bloc existant\n      },\n      {\n        name: \"block_test\",\n        blocklyJson: {\n          // On ajoute la d\u00e9finition du bloc ici, en rempla\u00e7ant le \"type\" par \"name\"\n          message0: \"%1 %2 %3\", // Affichage des arguments\n          args0: [\n            {\n              type: \"field_label_serializable\",\n              text: \"bloc test\",\n              name: \"NOM\",\n            },\n            // Ajouter un argument text input\n            {\n              type: \"field_input\",\n              name: \"PARAM_1\", // nom du param\u00e8tre (\u00e0 laisser car on peut de ce fait r\u00e9utiliser les fonctions d'extraction)\n              text: \"default\", // texte par d\u00e9faut dans l'input\n            },\n            // Ajouter une entr\u00e9e droite\n            {\n              type: \"input_value\",\n              name: \"PARAM_0\",\n            },\n          ],\n          output: null, // Sortie gauche\n          colour: 285,\n        },\n      },\n    ],\n    commands: [],\n    symbols: [],\n  },\n};\n</code></pre> <p>Le bloc block_test sera ajout\u00e9 dans la cat\u00e9gorie \"inputs\" si la bo\u00eete \u00e0 outils est tri\u00e9e par cat\u00e9gorie.</p> <ul> <li>Avec une fonction (voir la fonction makeGrepBlock()). Cela permet d'ajouter une logique plus complexe.</li> </ul> <p>Pour l'ajouter dans une nouvelle cat\u00e9gorie, il faut en cr\u00e9er une. Voir : Ajouter une cat\u00e9gorie</p>"},{"location":"help/add_command/","title":"Ajouter une commande","text":"<ol> <li>Dans le fichier commands.py, ajouter la fonction de la commande.</li> </ol> <p>Exemple : Pour ajouter la commande awk</p> commands.py<pre><code>def awk(arguments=None):\n    run_command(\"awk\", arguments=arguments)\n</code></pre>"},{"location":"help/init_task/","title":"Cr\u00e9er une t\u00e2che","text":"<p>Cette documentation explique comment cr\u00e9er une t\u00e2che pour le projet UnixFilters, en suivant les \u00e9tapes :</p> <ul> <li>ajouter les blocs</li> <li>modifier l\u2019\u00e9nonc\u00e9</li> <li>configurer les fichiers de test</li> <li>v\u00e9rifier la solution</li> </ul>"},{"location":"help/init_task/#ajouter-des-blocs-a-une-tache","title":"Ajouter des blocs \u00e0 une t\u00e2che","text":"<p>Dans unixfilters : Les blocs sont configur\u00e9s dans le fichier <code>public/task.js</code>. Il contient les blocs que l\u2019utilisateur pourra manipuler dans l\u2019interface.</p> <p>Exemple :</p> task.js<pre><code>function initTask(subTask) {\n  subTask.gridInfos = {\n    hideSaveOrLoad: false,\n    conceptViewer: false,\n    actionDelay: 200,\n\n    includeBlocks: {\n      groupByCategory: false, // ou true selon le besoin\n\n      generatedBlocks: {\n        unixfilters: [\n          // Ajouter ici les noms des blocs autoris\u00e9s (ex : \"cat\", \"grep\", \"sort\")\n        ],\n      },\n    },\n    // Autres param\u00e8tres\n  };\n}\n</code></pre> <p>(AJOUTER FORMAT NOMS BLOCS OPTION)</p>"},{"location":"help/init_task/#groupbycategory","title":"<code>groupByCategory</code>","text":"<p>L'option groupByCategory indique si les blocs sont affich\u00e9s group\u00e9s par type de commande ou en vrac :</p> <p>Exemple :</p> <code>groupByCategory: true</code> <code>groupByCategory: false</code>"},{"location":"help/init_task/#compatibilite-des-blocs","title":"Compatibilit\u00e9 des blocs","text":"<p>Chaque option est associ\u00e9e \u00e0 une commande principale (comme <code>grep</code>, <code>sed</code>, etc.), mais peut \u00eatre utilis\u00e9e avec d\u2019autres si elle est compatible.</p> <p>Exemple : Le bloc <code>option_i_flag_grep</code> est con\u00e7u pour <code>grep</code>, mais fonctionne aussi avec <code>sed</code> : <code>option_i_flag_sed</code>.</p> <p>La liste des compatibilit\u00e9s est disponible dans le fichier <code>public/unixfilters.js</code> dans le dictionnaire <code>optionTooltips</code></p>"},{"location":"help/init_task/#modifier-lenonce","title":"Modifier l'\u00e9nonc\u00e9","text":"<p>L\u2019\u00e9nonc\u00e9 de la t\u00e2che est dans le fichier <code>public/index.html</code>, dans la section <code>#taskContent</code>.</p> <p>Exemple :</p> index.html<pre><code>&lt;div id=\"taskContent\"&gt;\n  &lt;div id=\"taskIntro\"&gt;\n    &lt;p&gt;\n      &lt;span class=\"easy\"&gt;Consignes pour la t\u00e2che niveau easy&lt;/span&gt;\n      &lt;span class=\"medium\"&gt;Consignes pour la t\u00e2che niveau medium&lt;/span&gt;\n      &lt;span class=\"hard\"&gt;Consignes pour la t\u00e2che niveau hard&lt;/span&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n      &lt;span class=\"short\"&gt;R\u00e9sum\u00e9 court de l\u2019objectif&lt;/span&gt;\n    &lt;/p&gt;\n    &lt;p class=\"long\"&gt;Description plus d\u00e9taill\u00e9e si n\u00e9cessaire&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"help/init_task/#ajouter-le-fichier-manipule","title":"Ajouter le fichier manipul\u00e9","text":"<p>Dans checker, ajouter un fichier d'entr\u00e9e dans le dossier <code>exemple_checker/tests/gen</code> Ce fichier repr\u00e9sente les donn\u00e9es que la commande Unix doit manipuler dans l\u2019exercice.</p> <p>Exemple :</p> livres.txt<pre><code>Le Petit Prince - Antoine de Saint Exup\u00e9ry - 1943\n1984 - George Orwell - 1949\nHarry Potter \u00e0 l'\u00e9cole des sorciers - J.K. Rowling - 1997\nLe Seigneur des Anneaux - J.R.R. Tolkien - 1954\nDune - Frank Herbert - 1965\nFondation - Isaac Asimov - 1951\n</code></pre>"},{"location":"help/init_task/#verification-du-resultat","title":"V\u00e9rification du r\u00e9sultat","text":"<p>La v\u00e9rification se fait dans le checker, \u00e0 l\u2019aide de plusieurs fichiers :</p> <p>Dans le checker, dans le fichier <code>exemple_checker/tests/files/test01.out</code>, ajouter la solution attendue par l'exercice.</p> <p>Exemple :</p> <p>Si l\u2019utilisateur doit ex\u00e9cuter <code>cat livres.txt</code>, placez le contenu attendu de ce fichier dans <code>test01.out</code>.</p> test01.out<pre><code>Le Petit Prince - Antoine de Saint Exup\u00e9ry - 1943\n1984 - George Orwell - 1949\nHarry Potter \u00e0 l'\u00e9cole des sorciers - J.K. Rowling - 1997\nLe Seigneur des Anneaux - J.R.R. Tolkien - 1954\nDune - Frank Herbert - 1965\nFondation - Isaac Asimov - 1951\n</code></pre> <p>Le fichier <code>exemple_checker/tests/gen/checker.py</code> compare ensuite le r\u00e9sultat obtenu en ex\u00e9cutant le code g\u00e9n\u00e9r\u00e9 par les blocs et la solution dans test01.solout, en enlevant les espaces et retour \u00e0 la ligne, et renvoie un objet. Pour en savoir plus, consultez la documentation du checker (pas complet)</p>"},{"location":"help/init_task/#tester","title":"Tester","text":"<p>Red\u00e9marrez le serveur Node et le serveur Python. Dans l'interface, faites un cat du fichier ajout\u00e9 pour v\u00e9rifier.</p>"}]}